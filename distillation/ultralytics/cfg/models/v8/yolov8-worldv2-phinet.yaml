# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics YOLOv8-Worldv2 hybrid object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolo-world
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone


# backbone: #n 3.1M
#   # [from, repeats, module, args]
#   - [-1, 1, PhiNet, [[3,640,640], 6, 1.34, 3.2, 2, False, 10, False, [], 0.0, 2, True, False, False, True, True, 1, [8], 48,24,48]] # 0 128,80,80
#   - [-1, 1, PhiNetConvBlock, [[64,80.0,80.0], 4.0, 2, 128, True, 4, True, True, 3, 0.05, 1]] # 1  256,40,40
#   - [-1, 1, PhiNetConvBlock, [[128,40.0,40.0], 4.2, 2, 256, True, 5, True, True, 3, 0.05, 1 ]] # 2 512,20,20

backbone: #s 11M
  # [from, repeats, module, args]
  - [-1, 1, PhiNet, [[3,640,640], 6, 2.68, 3.5, 2, False, 10, False, [7,8], 0.0, 2, True, False, False, True, True, 1, [8], 48,24,48]] # 0 128,80,80
  - [-1, 1, PhiNetConvBlock, [[128,80.0,80.0], 5.2, 2, 256, True, 4, True, True, 3, 0.05, 1]] # 1  256,40,40
  - [-1, 1, PhiNetConvBlock, [[256,40.0,40.0], 5.2, 2, 512, True, 5, True, True, 3, 0.05, 1 ]] # 2 512,20,20


# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 3
  #--> output 256x40x40 
  #concat 256x40x40 from 3 and 128x40x40 from 1
  - [[-1, 1], 1, Concat, [1]] # cat backbone P4 # 4
  #--> output 384x40x40
  - [-1, 3, C2fAttn, [512, 256, 8]] # 5 #512*0.25=128
  #--> output 128x40x40
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 6
  #--> output 128x80x80
  #concat 128x80x80 from 6 and 64x80x80 from 0
  - [[-1, 0], 1, Concat, [1]] # cat backbone P3 # 7
  #--> output 192x80x80
  - [-1, 3, C2fAttn, [256, 128, 4]] # 8 (P3/8-small) #15 #256*0.25=64
  #--> output 64x80x80

  #takes layer 8 with size 64,80,80
  - [8, 1, Conv, [256, 3, 2]] # 9 #256*0.25=64
  #--> output 64x40x40
  #concat 64x40x40 from 9 and 128x40x40 from 6
  - [[-1, 5], 1, Concat, [1]] # cat head P4 # 10
  #--> output 192x40x40
  - [-1, 3, C2fAttn, [512, 256, 8]] # 11 (P4/16-medium) #512*0.25=128
  #--> output 128x40x40
  - [-1, 1, Conv, [512, 3, 2]] #12
  #--> output 128x20x20
  #concat 128x20x20 from 12 and 256x20x20 from 2
  - [[-1, 2], 1, Concat, [1]] # cat head P5 # 13
  #--> output 384x20x20
  - [-1, 3, C2fAttn, [1024, 512, 16]] # 14 (P5/32-large) 
  #--> output 256x20x20

#takes layers 
 # 8 with size 64,80,80
 # 11 with size 128,40,40
 # 14 with size 256,20,20
  - [[8, 11, 14], 1, WorldDetect, [nc, 512, True]] # Detect(P3, P4, P5) #15
