# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics YOLOv8 object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolov8
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# backbone: #n 3M
#   # [from, repeats, module, args]
#   - [-1, 1, PhiNet, [[3,640,640], 6, 1.34, 3.6, 3, False, 10, False, [], 0.0, 2, True, False, False, True, True, 1, [8], 48,24,48]] # 0 64,80,80
#   - [-1, 1, PhiNetConvBlock, [[64,80.0,80.0], 4.4, 2, 128, True, 4, True, True, 3, 0.05, 1]] # 1  128,40,40
#   - [-1, 1, PhiNetConvBlock, [[128,40.0,40.0], 4.6, 2, 256, True, 5, True, True, 3, 0.05, 1 ]] # 2 256,20,20
backbone: #s 11M
  # [from, repeats, module, args]
  - [-1, 1, PhiNet, [[3,640,640], 6, 2.68, 3.5, 2, False, 10, False, [7,8], 0.0, 2, True, False, False, True, True, 1, [8], 48,24,48]] # 0 128,80,80
  - [-1, 1, PhiNetConvBlock, [[128,80.0,80.0], 5.2, 2, 256, True, 4, True, True, 3, 0.05, 1]] # 1  256,40,40
  - [-1, 1, PhiNetConvBlock, [[256,40.0,40.0], 5.2, 2, 512, True, 5, True, True, 3, 0.05, 1 ]] # 2 512,20,20
  - [-1, 1, PhiNetConvBlock, [[512,20.0,20.0], 2.2, 1, 512, True, 6, True, True, 3, 0.05, 1 ]] # 3 512,20,20


head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #3
  #256x40x40
  - [[-1, 1], 1, Concat, [1]] # cat backbone P4 # 4
  #takes the layer 6 with size 128,40,40 and outputs 384x40x40
  - [-1, 3, C2f, [512]] # 5
  #128x40x40
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #6
  #128x80x80
  - [[-1, 0], 1, Concat, [1]] # cat backbone P3 #7
  #takes the layer 4 with size 64,80,80 and outputs 192x80x80
  - [-1, 3, C2f, [256]] # 8 (P3/8-small)
  #64x80x80
  - [-1, 1, Conv, [256, 3, 2]] #9
  #64x40x40
  - [[-1, 6], 1, Concat, [1]] # cat head P4 #10
  #takes the layer 12 with size 128,40,40 and outputs 192x40x40
  - [-1, 3, C2f, [512]] # 11 (P4/16-medium)
  #128x40x40
  - [-1, 1, Conv, [512, 3, 2]] #12
  #128x20x20
  - [[-1, 2], 1, Concat, [1]] # cat head P5 #13
  #takes the layer 9 with size 256,20,20 and outputs 384x20x20
  - [-1, 3, C2f, [1024]] # 14 (P5/32-large)
  #256x20x20

#takes layers
#15: 64x80x80
#18: 128x40x40
#21: 256x20x20
  - [[9, 12, 15], 1, Detect, [nc]] # Detect(P3, P4, P5)
